{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport ExpoSecureStore from \"./ExpoSecureStore\";\nexport var AFTER_FIRST_UNLOCK = ExpoSecureStore.AFTER_FIRST_UNLOCK;\nexport var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport var ALWAYS = ExpoSecureStore.ALWAYS;\nexport var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport var ALWAYS_THIS_DEVICE_ONLY = ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport var WHEN_UNLOCKED = ExpoSecureStore.WHEN_UNLOCKED;\nexport var WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nvar VALUE_BYTES_LIMIT = 2048;\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoSecureStore.getValueWithKeyAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function deleteItemAsync(_x) {\n  return _deleteItemAsync.apply(this, arguments);\n}\nfunction _deleteItemAsync() {\n  _deleteItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    ensureValidKey(key);\n    yield ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n  });\n  return _deleteItemAsync.apply(this, arguments);\n}\nexport function getItemAsync(_x2) {\n  return _getItemAsync.apply(this, arguments);\n}\nfunction _getItemAsync() {\n  _getItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    ensureValidKey(key);\n    return yield ExpoSecureStore.getValueWithKeyAsync(key, options);\n  });\n  return _getItemAsync.apply(this, arguments);\n}\nexport function setItemAsync(_x3, _x4) {\n  return _setItemAsync.apply(this, arguments);\n}\nfunction _setItemAsync() {\n  _setItemAsync = _asyncToGenerator(function* (key, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    ensureValidKey(key);\n    if (!isValidValue(value)) {\n      throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);\n    }\n    yield ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n  });\n  return _setItemAsync.apply(this, arguments);\n}\nexport function setItem(key, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  ensureValidKey(key);\n  if (!isValidValue(value)) {\n    throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);\n  }\n  return ExpoSecureStore.setValueWithKeySync(value, key, options);\n}\nexport function getItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ensureValidKey(key);\n  return ExpoSecureStore.getValueWithKeySync(key, options);\n}\nfunction ensureValidKey(key) {\n  if (!isValidKey(key)) {\n    throw new Error(`Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`);\n  }\n}\nfunction isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\nfunction isValidValue(value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn('Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.');\n  }\n  return true;\n}\nfunction byteCount(value) {\n  var bytes = 0;\n  for (var i = 0; i < value.length; i++) {\n    var codePoint = value.charCodeAt(i);\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        var next = value.charCodeAt(i + 1);\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n  return bytes;\n}","map":{"version":3,"names":["ExpoSecureStore","AFTER_FIRST_UNLOCK","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","WHEN_UNLOCKED","WHEN_UNLOCKED_THIS_DEVICE_ONLY","VALUE_BYTES_LIMIT","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","getValueWithKeyAsync","deleteItemAsync","_x","_deleteItemAsync","key","options","length","undefined","ensureValidKey","deleteValueWithKeyAsync","getItemAsync","_x2","_getItemAsync","setItemAsync","_x3","_x4","_setItemAsync","value","isValidValue","Error","setValueWithKeyAsync","setItem","setValueWithKeySync","getItem","getValueWithKeySync","isValidKey","test","byteCount","console","warn","bytes","i","codePoint","charCodeAt","next"],"sources":["C:\\Users\\vivek\\Downloads\\final_yr_project\\222957_EVChargingAppmain\\EV-Charging-App-main\\node_modules\\expo-secure-store\\src\\SecureStore.ts"],"sourcesContent":["import ExpoSecureStore from './ExpoSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\n// @needsAudit\n/**\n * The data in the keychain item cannot be accessed after a restart until the device has been\n * unlocked once by the user. This may be useful if you need to access the item when the phone\n * is locked.\n */\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant = ExpoSecureStore.AFTER_FIRST_UNLOCK;\n\n// @needsAudit\n/**\n * Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring\n * from a backup.\n */\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can always be accessed regardless of whether the device is locked.\n * This is the least secure option.\n */\nexport const ALWAYS: KeychainAccessibilityConstant = ExpoSecureStore.ALWAYS;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to\n * store an entry. If the user removes their passcode, the entry will be deleted.\n */\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.\n */\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can be accessed only while the device is unlocked by the user.\n */\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExpoSecureStore.WHEN_UNLOCKED;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from\n * a backup.\n */\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nconst VALUE_BYTES_LIMIT = 2048;\n\n// @needsAudit\nexport type SecureStoreOptions = {\n  /**\n   * - Android: Equivalent of the public/private key pair `Alias`.\n   * - iOS: The item's service, equivalent to [`kSecAttrService`](https://developer.apple.com/documentation/security/ksecattrservice/).\n   * > If the item is set with the `keychainService` option, it will be required to later fetch the value.\n   */\n  keychainService?: string;\n  /**\n   * Option responsible for enabling the usage of the user authentication methods available on the device while\n   * accessing data stored in SecureStore.\n   * - Android: Equivalent to [`setUserAuthenticationRequired(true)`](https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean))\n   *   (requires API 23).\n   * - iOS: Equivalent to [`kSecAccessControlBiometryCurrentSet`](https://developer.apple.com/documentation/security/secaccesscontrolcreateflags/ksecaccesscontrolbiometrycurrentset/).\n   * Complete functionality is unlocked only with a freshly generated key - this would not work in tandem with the `keychainService`\n   * value used for the others non-authenticated operations.\n   *\n   * Warning: This option is not supported in Expo Go when biometric authentication is available due to a missing NSFaceIDUsageDescription.\n   * In release builds or when using continuous native generation, make sure to use the `expo-secure-store` config plugin.\n   *\n   */\n  requireAuthentication?: boolean;\n  /**\n   * Custom message displayed to the user while `requireAuthentication` option is turned on.\n   */\n  authenticationPrompt?: string;\n  /**\n   * Specifies when the stored entry is accessible, using iOS's `kSecAttrAccessible` property.\n   * @see Apple's documentation on [keychain item accessibility](https://developer.apple.com/documentation/security/ksecattraccessible/).\n   * @default SecureStore.WHEN_UNLOCKED\n   * @platform ios\n   */\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\n// @needsAudit\n/**\n * Returns whether the SecureStore API is enabled on the current device. This does not check the app\n * permissions.\n *\n * @return Promise which fulfils witch `boolean`, indicating whether the SecureStore API is available\n * on the current device. Currently, this resolves `true` on Android and iOS only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoSecureStore.getValueWithKeyAsync;\n}\n\n// @needsAudit\n/**\n * Delete the value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if the value couldn't be deleted.\n */\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  ensureValidKey(key);\n\n  await ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Reads the stored value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that resolves to the previously stored value. It will return `null` if there is no entry\n * for the given key or if the key has been invalidated. It will reject if an error occurs while retrieving the value.\n *\n * > Keys are invalidated by the system when biometrics change, such as adding a new fingerprint or changing the face profile used for face recognition.\n * > After a key has been invalidated, it becomes impossible to read its value.\n * > This only applies to values stored with `requireAuthentication` set to `true`.\n */\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  ensureValidKey(key);\n  return await ExpoSecureStore.getValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Stores a key–value pair.\n *\n * @param key The key to associate with the stored value. Keys may contain alphanumeric characters, `.`, `-`, and `_`.\n * @param value The value to store. Size limit is 2048 bytes.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if value cannot be stored on the device.\n */\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  ensureValidKey(key);\n  if (!isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n\n  await ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\n/**\n * Stores a key–value pair synchronously.\n * > **Note:** This function blocks the JavaScript thread, so the application may not be interactive when the `requireAuthentication` option is set to `true` until the user authenticates.\n *\n * @param key The key to associate with the stored value. Keys may contain alphanumeric characters, `.`, `-`, and `_`.\n * @param value The value to store. Size limit is 2048 bytes.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n */\nexport function setItem(key: string, value: string, options: SecureStoreOptions = {}): void {\n  ensureValidKey(key);\n  if (!isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n\n  return ExpoSecureStore.setValueWithKeySync(value, key, options);\n}\n\n/**\n * Synchronously reads the stored value associated with the provided key.\n * > **Note:** This function blocks the JavaScript thread, so the application may not be interactive when reading a value with `requireAuthentication`\n * > option set to `true` until the user authenticates.\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return Previously stored value. It will return `null` if there is no entry for the given key or if the key has been invalidated.\n */\nexport function getItem(key: string, options: SecureStoreOptions = {}): string | null {\n  ensureValidKey(key);\n  return ExpoSecureStore.getValueWithKeySync(key, options);\n}\n\nfunction ensureValidKey(key: string) {\n  if (!isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction isValidValue(value: string) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn(\n      'Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.'\n    );\n  }\n  return true;\n}\n\n// copy-pasted from https://stackoverflow.com/a/39488643\nfunction byteCount(value: string) {\n  let bytes = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    const codePoint = value.charCodeAt(i);\n\n    // Lone surrogates cannot be passed to encodeURI\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        const next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}